********** Vamos a generar data fake para nuestra paginaciÃ³n ********

  utilizamos la libreria npm i faker

Ahora vamos a generar una ruta por get para que cuando accedamos 
a ella se generen nuestros datos fake, y otra para eliminar 
todos los productos de la collecion.

  routes
    // End Point para generar datos falsos
    router.get("/generate", productsCtrl.generate);

    // End Point para eliminar todos los productos
    router.delete("/fake-data", productsCtrl.deleteAll);

Ahora generemos las acciones del controller 
  import faker form "faker";
  faker.locale = "es";

  // fn para generar datos falsos a travez de faker
  export const generate = (req, res) => {
    let categories = [
      "Electronica",
      "Audio",
      "Telefonia",
      "Juegos",
      "Computacion",
    ];

    let products = [];

    for (let i = 0; i < 30; i++) {
      const product = new Product();
      product.category =
        categories[Math.floor(Math.random() * categories.length)];
      product.name = faker.commerce.productName();
      product.price = faker.commerce.price();
      product.imgURL = faker.image.technics();

      try {
        const productSaved = product.save();
        products.push(productSaved);
      } catch (error) {
        console.log(error);
        return res.status(400).json({ message: "Error fake data save." });
      }
    }

    res.json({ data: products });
  };


  // fn para vaciar la colleccion de products
  export const deleteAll = (req, res) => {
    Product.deleteMany({}, (error, products) => {
      resServer(res, error, products);
    });
  };

Con esto ya podemos generar datos fake y probar paginar y buscar segun condiciones.

Antes de continuar refactoricemos las acciones getProducts y getProductsPerPage

  // Obtiene los productos en base a conditions, sort, skip y limit
  export const getProducts = async (req, res) => {
    let { name, category, sort, skip, limit } = req.query;

    const conditions = (name && { name }) || (category && { category });
    sort = sort === "asc" ? { _id: 1 } : { _id: -1 };
    skip = skip && parseInt(skip);
    limit = limit && parseInt(limit);

    search({ conditions, sort, skip, limit, res });
  };

  // fn para obtener los productos por pagina
  export const getProductsPerPage = async (req, res) => {
    let { limit, page } = req.query; // received limits for query strings
    limit = parseInt(limit) || 10; // if limits is null
    page = parseInt(page) || 1; // if page is null
    const skip = limit * page - limit; //example 2 * 1 = 2 ; 2-2= 0; in the first page the value of the skip is 0
    search({ skip, limit, res });
  };

  Ahora si ;)