********* Test de nuestros end points ********

Vamos a automatizar las pruebas de nuestros end points 
a travez de: 
  -> Jest: es un Framework de pruebas de js
  -> Supertest: es un modulo que proporciona abstracción de alto 
  nivel para probar peticones HTTP. 

  npm install jest supertest -D

Dentro del package.json vamos a realizar una configuración inicial

Quedando asi: 
      "scripts": {
        "dev": "NODE_ENV=development nodemon src/server/index.js --exec babel-node",
        "build": "babel src/ --out-dir dist && cp -R ./src/keys ./dist/keys/",
        "build-dev": "cp .env ./dist/.env",
        "start": "NODE_ENV=production node dist/server/index.js",
        "test": "NODE_ENV=test jest --verbose  --detectOpenHandles",
        "test:watch": "npm run test -- --watch"
      },
        "keywords": [],
        "author": "Nikolas",
        "license": "ISC",
        "jest": {
          "testEnvironment": "node",
          "coveragePathIgnorePatterns": [
            "/node_modules/"
          ]
      },

Antes de continuar vamos a transladar la fn de createRoles al index. 

Bien ahora vamos a reparar el error de la creacion de roles que arroja babel 
  npm uninstall @babel/polyfill
  npm i babel-core@bridge @babel/core@7 @babel/plugin-transform-runtime -D
  Deberia quedar asi:

    "dependencies": {
      "bcryptjs": "^2.4.3",
      "cors": "^2.8.5",
      "dotenv": "^8.2.0",
      "express": "^4.17.1",
      "joi": "^17.4.0",
      "jsonwebtoken": "^8.5.1",
      "mongoose": "^5.12.1",
      "morgan": "^1.10.0"
    },
    "devDependencies": {
      "@babel/cli": "^7.13.10",
      "@babel/core": "^7.13.15",
      "@babel/node": "^7.13.10",
      "@babel/plugin-transform-runtime": "^7.13.15",
      "@babel/preset-env": "^7.13.10",
      "babel-core": "^7.0.0-bridge.0",
      "faker": "^5.5.3",
      "jest": "^26.6.3",
      "nodemon": "^2.0.7",
      "supertest": "^6.1.3"
    }

Ahora configuramos .babelrc
  {
    "presets": [
      "@babel/preset-env"
    ],
    "plugins": [
      "@babel/plugin-transform-runtime"
    ]
  }

Por ultimo cambiamos el initialSetup.js
  import Role from "../models/Role";

  export const createRoles = async () => {
    try {
      // devuelve la cantidad de documentos existentes del
      const roles = await Role.estimatedDocumentCount();

      //Si no existen roles crea roles por defecto
      if (!roles && process.env.NODE_ENV != "test") {
        // Generamos una promesa multiple para ganar rendimiento
        const values = await Promise.all([
          new Role({ name: "user" }).save(),
          new Role({ name: "moderator" }).save(),
          new Role({ name: "admin" }).save(),
        ]);

        console.log(values);
      }
    } catch (error) {
      console.log(error);
    }
  };


Ahora si creamos una carpeta test y dentro un sample.test.js
  import app from "../server/app.js";

  describe("Sample Test", () => {
    it("should test that true === true", () => {
      expect(true).toBe(true);
    });
  });

Eliminamos la bd de desarrollo y eliminamos los documentos de la coleccion de roles 
de produccion mediante robo 3t. 
Probamos los test entornos de desarrollo. 

***** Comencemos por testear el end point de roles ***** 

  Vamos hacerlo al estilo TDD comencemos creando los test, esperemos que fallen 
  y por ultimo creamos la logica para poder pasar esos test. 

 el index.js de nuestro server debe estar asi 

  import dotenv from "dotenv";
  import { createRoles } from "../libs/initialSetup";
  import app from "./app";
  import { connect } from "./database";

  createRoles(); //creación inicial de roles

  const { NODE_ENV } = process.env;

  const config = dotenv.config();
  const { SERVER_PORT } = config.parsed;
  connect(); //conexión database

  const server = app.listen(SERVER_PORT); //server run on port 3002

  // console.log(`>>>> Environment: ${NODE_ENV}🎫 <<<<`);
  // console.log(`>>>> Server run on port ${SERVER_PORT} 🖥`);

  export { app, server };
