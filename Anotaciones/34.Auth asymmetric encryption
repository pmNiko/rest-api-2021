************* Encriptación asimetrica ***********

https://www.gb-advisors.com/es/encriptacion-simetrica-y-asimetrica-conoce-sus-diferencias/#:~:text=Los%20algoritmos%20de%20encriptaci%C3%B3n%20sim%C3%A9trica,y%20otra%20distinta%20para%20desencriptarlos.

Hasta ahora hemos usado una encriptación simetrica, es decir encriptamos y desencriptamos con la misma clave
el token del usuario, pero esto no es del todo seguro. Para esto vamos a generar una clave publica y otra privada 
para enciptar con la privada y desencriptar con la publica. Las  claves generadas estan enlazadas matematicamente.

Podemos utilizar cualquier generador de claves RSA como https://travistidwell.com/jsencrypt/demo/

Ahora creamos una carpeta keys y dentro dos archivos uno private.pem y otro public.pem
y dentro pegamos las claves generadas. 

Vamos a crear el archivo token.js en libs el cual vamos a utilizar tanto en el controller como el middle 
de verificación. 

Dentro vamos a crear la funcion de creacion y otra de verificacion de firma.
    /*
      fn para generar y verificar la firma del token
    */
    import jwt from "jsonwebtoken";
    import path from "path";
    import fs from "fs";

    // import private and public key
    const publicKey = fs.readFileSync(path.join(__dirname, "../keys/public.pem"));
    const privateKey = fs.readFileSync(path.join(__dirname, "../keys/private.pem"));
    const options = { expiresIn: "6h", algorithm: "RS256" };

    // create token with private key
    export const sign = (payload) => jwt.sign(payload, privateKey, options);

    // verify token with public key
    export const verify = (token) => jwt.verify(token, publicKey);


Ahora quedaria importar nuestra fn y simplemente utilizar sus metodos
en auth.controller.js
Importamos como: 
  import * as token from "../libs/token";


Ahora cambiamos en singup y singin esto: 
  // creación del token
  // const token = jwt.sign({ id: savedUser._id }, config.SECRET, {
  //   expiresIn: 86400,
  // });

Por esto:
  //creacion del token
  const tokenJwt = token.sing({ id: savedUser._id });

  // creación del token
  const tokenJwt = token.sign({ id: userFound._id });

Y en el middle de authorization cambiamos: 
  // verifica la veracidad del token
    const decoded = jwt.verify(token, config.SECRET);

Por esto: 
  // verifica la veracidad del token
    const decoded = token.verify(token);


