******* Proteccion de rutas por autenticación *******

Para poder proteger las rutas segun el rol del user vamos a crear algunos middlewares.
Vamos a crear dos middle: 
  middlewares/authorization.js  //Validación de token y rol asignado
  middlewares/verify.js         //Comprobación de usuario y rol existente
  middlewares/index.js          //Para exportar ambos

Comenzamos por el authorization // middleware de express
 En esta fn vamos a esperar recibir en la prop "x-access-token" del headers 
 el token del user. La contendremos en una constante token para verla por consola.

 export const verifyToken = async (req, res, next) => {
  const token = req.headers["x-access-token"];

  console.log(token);

  next();
};

Para probar su funcionalidad vamos a importarla en products.routes.js 
Pero antes vamos a exportar ambos middle desde su index.js 

  import { verifyToken } from "./authorization";

  export { verifyToken };

Ahora si importemos el middleware en las rutas del producto 
  import { verifyToken } from "../middlewares";

  // End Point para crear
  router.post("/", verifyToken, productsCtrl.createProduct);

POSTMAN En Headers 
  key: Content-Type      value: application/json
  x-access-token         value: my-secret-token

        En Body tipo raw
  {
    "name": "Laptop MSI",
    "price": 700.90,
    "category": "Laptops",
    "imgURL": "https://images-na.ssl-images-amazon.com/images/I/81mIXd99GrL._AC_SL1500_.jpg"
  }

    Por consola: 
      my-secret-token
      POST /api/products 201 2.398 ms - 258

Bien ya lo vemos por consola, ahora vamos a cortar la ejecución si el token no es enviado. 
En nuestra fn vamos a escribir: 
  export const verifyToken = async (req, res, next) => {
    const token = req.headers["x-access-token"];

    if (!token) return res.status(403).json({ message: "No token provided." });

    next();
  };

Volvemos a enviar la petición pero sin x-access-token 
Por consola: 
  Server corriendo correctamente!!!
  >>>> Database is connected!
  POST /api/products 403 3.076 ms - 32

Callback funcionando, ahora vamos a decodificar el token con el metodo 
verify de jwt. 
Para esto debemos importar jwt y server/config.js ademas del modelo de user 
para verificar que realmente sea un user valido. 

  import config from "../server/config";
  import jwt from "jsonwebtoken";
  import User from "../models/User";

  export const verifyToken = async (req, res, next) => {
    const token = req.headers["x-access-token"];

    if (!token) return res.status(403).json({ message: "No token provided." });

    const decoded = jwt.verify(token, config.SECRET);

    const user = await User.findById(decoded.id, {password: 0}); //password: 0 para que no lo devuelva

    if (!user) return res.status(404).json({ message: "no user found" });

    next();
  };

Eliminemos todos los users y creemos dos uno con rol de admin y moderator y otro normal

  Por POSTMAN hagamos signup en auth de dos users

  {
      "username": "Normando",
      "email": "norman@gmail.com",
      "password": "simple"
  }

  {
      "username": "Heroe",
      "email": "ultra@gmail.com",
      "password": "power",
      "roles": ["admin", "moderator"]
  }

  Ahora nos logueamos con Normando:  auth signin
    {
        "email": "norman@gmail.com",
        "password": "simple"
    }

  Nos devuelve un token el cual usaremos en el post de products, pero antes refactoricemos: 
    authorization.js 

    import config from "../server/config";
    import jwt from "jsonwebtoken";

    // Middleware encargado de verificar el token del user
    export const verifyToken = async (req, res, next) => {
      const token = req.headers["x-access-token"];

      // si el token no es enviado corta la ejecución
      if (!token) return res.status(403).json({ message: "No token provided." });

      try {
        // verifica la veracidad del token
        const decoded = jwt.verify(token, config.SECRET);
        req.userId = decoded.id;  //usaremos req.userId en los siguientes middle
        next();
      } catch (error) {
        console.log(error);
        return res.status(401).json({ message: "Unauthorized" });
      }
    };

  Ahora ya podemos probar la petición post de products con el token del user logueado.
  Reutilizando el middle vamos a proteger PUT and DELETE

