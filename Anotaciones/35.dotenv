********** Entornos de desarrollo ***********

Creamos en la raiz del proyecto .env y lo agregamos al .gitignore

  Definamos algunas variables de entorno 
    SERVER_PORT=4000
    DB_HOST = "mongodb://localhost"
    DB_PORT = 27017
    DB_DATABASE = "apiRestProducts"
    DB_DATABASE_DEV = "apiRestProductsDev"
    DB_DATABASE_TEST = "apiRestProductsTest"
    DB_USER = ""
    DB_PASSWORD = ""

  Ahora las utilizamos en index y en database.js
    import dotenv from "dotenv";

    // console.log(dotenv.config());

    const result = dotenv.config();
    const { SERVER_PORT } = result.parsed;

    app.listen(SERVER_PORT); //server run on port 3002
    connect(); //conexiÃ³n database

    console.log(`>>>> Server run on port ${SERVER_PORT} ðŸ–¥`);

  database.js
    import dotenv from "dotenv";

    const { NODE_ENV } = process.env;
    const result = dotenv.config();
    const { DB_HOST, DB_PORT, DB_DATABASE, DB_DATABASE_DEV, DB_DATABASE_TEST} = result.parsed;

    const url = `${DB_HOST}:${DB_PORT}/`;
    let environment = "";

    switch (NODE_ENV) {
      case "prod":
        environment = `${url}${DB_DATABASE}`;
        break;
      case "dev":
        environment = `${url}${DB_DATABASE_DEV}`;
        break;
      default:
        environment = `${url}${DB_DATABASE_TEST}`;
        break;
    }

    export async function connect() {
      await mongoose
        .connect(`${environment}`, {
          useNewUrlParser: true,
          useUnifiedTopology: true,
          useFindAndModify: true,
          useCreateIndex: true,
        })
        .then((db) => console.log(`>>>> Database is connected on ${environment} ðŸ—‚`))
        .catch((err) => console.log(">>> Error: ", err));
    }

  Ahora el package.json 
    "scripts": {
      "dev": "NODE_ENV=dev nodemon src/server/index.js --exec babel-node",
      "build": "babel src/ --out-dir dist && cp -R ./src/keys ./dist/keys/",
      "build-dev": "cp .env ./dist/.env",
      "start": "NODE_ENV=prod node dist/server/index.js"
    },

Con esto tenemos definidos los entornos de produccion y desarrollo. 


Al hacer el buil de la app no da un error. Solucion: importar polyfill
https://medium.com/@afdiaz_/referenceerror-regeneratorruntime-is-not-defined-eeb6c17f4bdb
https://babeljs.io/docs/en/babel-polyfill/

    Por ultimo vamos a realizar un pequeÃ±o cambio en token.js
      /*
      fn para generar y verificar la firma del token
    */
    import jwt from "jsonwebtoken";
    import path from "path";
    import fs from "fs";

    // import private and public key
    const key = fs.readFileSync(path.join(__dirname, "../keys/private.pem"));
    const cert = fs.readFileSync(path.join(__dirname, "../keys/public.pem"));
    const options = { expiresIn: "6h", algorithm: "RS256" };

    // create token with private key
    export const sign = (payload) => jwt.sign(payload, key, options);

    // verify token with public key
    export const verify = (token) => jwt.verify(token, cert);




